import Character from '../Entities/Character';
import { playerCharacterTypes } from '../Entities/Heroes';
import PositionedCharacter from '../Game/PositionedCharacter';
import { FieldCellEdgeType } from '../types/types';

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫—Ä–∞—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –ª–∏–Ω–µ–π–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (—Å—Ç—Ä–æ–∫–∞/—Å—Ç–æ–ª–±–µ—Ü).
 * 
 * @param position - –ü–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–æ—Ç 0 –¥–æ size-1).
 * @param size - –†–∞–∑–º–µ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
 * 
 * @returns {number} –¢–∏–ø –∫—Ä–∞—è:
 *   - 0: –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è).
 *   - 2: –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è).
 *   - 1: —Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
 */
export function getFieldCellEdgeType(position: number, size: number): FieldCellEdgeType {
  if (position === 0) return 0;
  if (position === size - 1) return 2;
  return 1;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —è—á–µ–π–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ –ø–æ –µ—ë –∏–Ω–¥–µ–∫—Å—É.
 * 
 * @param {number} index - –ü–ª–æ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å —è—á–µ–π–∫–∏.
 * @param {number} boardSize - –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è.
 * 
 * @returns {string} –¢–∏–ø —è—á–µ–π–∫–∏. –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
 *   - 'top-left':    –≤–µ—Ä—Ö–Ω–∏–π-–ª–µ–≤—ã–π —É–≥–æ–ª
 *   - 'top':         –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π (–Ω–µ —É–≥–ª–æ–≤–æ–π)
 *   - 'top-right':   –≤–µ—Ä—Ö–Ω–∏–π-–ø—Ä–∞–≤—ã–π —É–≥–æ–ª
 *   - 'left':        –ª–µ–≤—ã–π –∫—Ä–∞–π (–Ω–µ —É–≥–ª–æ–≤–æ–π)
 *   - 'center':      —Ü–µ–Ω—Ç—Ä (–Ω–µ –Ω–∞ –∫—Ä–∞—è—Ö)
 *   - 'right':       –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π (–Ω–µ —É–≥–ª–æ–≤–æ–π)
 *   - 'bottom-left': –Ω–∏–∂–Ω–∏–π-–ª–µ–≤—ã–π —É–≥–æ–ª
 *   - 'bottom':      –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π (–Ω–µ —É–≥–ª–æ–≤–æ–π)
 *   - 'bottom-right':–Ω–∏–∂–Ω–∏–π-–ø—Ä–∞–≤—ã–π —É–≥–æ–ª
 *
 * @example
 * ```js
 * calcTileType(5, 8);   // 'top'
 * calcTileType(56, 8);  // 'bottom-left'
 * calcTileType(18, 8);  // 'center'
 * ```
 */
export function calcTileType(index: number, boardSize: number): string {
  const rowType = getFieldCellEdgeType(Math.floor(index / boardSize), boardSize);
  const colType = getFieldCellEdgeType(index % boardSize, boardSize);

  return [
    'top-left', 'top', 'top-right',
    'left', 'center', 'right',
    'bottom-left', 'bottom', 'bottom-right'
  ][rowType * 3 + colType];
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
 * 
 * @param {number} health - –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.
 * 
 * @returns {string} —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏:
 * - critical
 * - normal
 * - high
 */
export function calcHealthLevel(health: number): string {
  if (health < 15) return 'critical';
  if (health < 50) return 'normal';

  return 'high';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
 * 
 * @param {Character} character - –æ–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ.
 * 
 * @returns {string} —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "üéñ1 ‚öî10 üõ°40 ‚ù§50", –≥–¥–µ:
 * - üéñ1 - —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
 * - ‚öî10 - –∞—Ç–∞–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
 * - üõ°40 - –∑–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
 * - ‚ù§50 - –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
 */
export function formatCharacterInfo(character: Character): string {
  return `üéñ${character.level} ‚öî${character.attack} üõ°${character.defense} ‚ù§${character.health}`;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –∏–Ω–¥–µ–∫—Å—É.
 * 
 * @param {PositionedCharacter[]} characters - —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
 * @param {number} index - –∏–Ω–¥–µ–∫—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–ø–∏—Å–∫–µ.
 * 
 * @returns {PositionedCharacter | undefined} –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º –∏–ª–∏ 
 * undefined, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω.
 */
export function findCharacterByIndex(
  characters: PositionedCharacter[], 
  index: number
): PositionedCharacter | undefined {
  return characters.find((character) => character.position === index);
}

/**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–∏–ø–æ–º –∏–≥—Ä–æ–∫–∞.
   * @param {PositionedCharacter} positionedCharacter - –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂.
   * @returns {boolean} - true, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞, –∏–Ω–∞—á–µ false.
   */
export function isPlayerCharacter(positionedCharacter: PositionedCharacter): boolean {
  return playerCharacterTypes.includes(positionedCharacter.character.type);
}

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–ª—é—á –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏.
 * 
 * @param {string} key - –ö–ª—é—á –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
 * @returns {string} –ü–µ—Ä–µ–≤–æ–¥ –∫–ª—é—á–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏.
 */
export function translateMetricName(key: string): string {
  const mapping: Record<string, string> = {
    playerDefeats: '–ü–æ—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞',
    enemiesKilled: '–£–±–∏—Ç–æ –≤—Ä–∞–≥–æ–≤',
    totalLevelsCompleted: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π',
    maxLevelReached: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å',
    saveUsageCount: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π',
    loadUsageCount: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–≥—Ä—É–∑–æ–∫',
  };
  
  return mapping[key] || key;
}
